import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Scanner;
import ithakimodem.*;
public class userApplication {
private static Scanner in = new Scanner(System.in);
 private static String codeEcho= "E3016";
 private static String codeImageErrorFree="M7187CAM=PTZ";
 private static String codeImageWithErrors="G7344CAM=PTZ";
 private static String codeGPS="P1995";
 private static String codeACK="Q0502";
 private static String codeNACK="R8971";

public static void main(String[] args) throws IOException, InterruptedException {
 int speed, timeout;
 speed=80000; //set modem speed
 timeout=2000; //set timeout speed;
 Modem modem = new Modem(speed); //create modem with speed 80000
 Modem betaModem = new Modem(speed); //create beta modem with speed 8000
 modem.setTimeout(timeout); //timeout set
 modem.write("ATD2310ITHAKI\r".getBytes()); //Virtual modem in command mode
 receiveConsole(modem);

 System.out.println("Testing..");
 modem.write(("test\r").getBytes());
 receiveConsole(modem);

 for(;;){
 System.out.println("\n**UserApplication MENU**");
 System.out.print("0. EXIT\n"
 + "1. Echo\n"
 + "2. Error Free Image\n"
 + "3. Image With Errors\n"
 + "4. GPS\n"
 + "5. ARQ\n"
 + "6. Execute ALL\n");

 System.out.print(">>Enter your Option: ");
 int opt = in.nextInt();
 System.out.println(""); //new line

 switch (opt) {
 case 0: {
 //Close
 System.out.println("\nExiting Application..");
 modem.close();
in.close();
return;
 }
 case 1: {
 //ECHO
receiveEcho(modem, codeEcho);
 break;
 }
 case 2: {
 //Image without errors
receiveImage(modem, codeImageErrorFree, "ErrorFreeImage.jpg");
 break;
 }
 case 3: {
 //Image with Errors
 receiveImage(modem, codeImageWithErrors, "ImageWithErrors.jpg");
 }
 case 4: {
 //GPS 
 receiveGPS(modem, codeGPS);
 break;
 }
 case 5: {
 //ARQ
receiveARQ(modem, codeACK, codeNACK);
 break;
 }
 case 6: {
 //Execute ALL
 receiveEcho(modem, codeEcho);
 receiveImage(modem, codeImageErrorFree, "ErrorFreeImage.jpg");
 receiveImage(modem, codeImageWithErrors, "ImageWithErrors.jpg");
 receiveGPS(modem, codeGPS);
 receiveARQ(modem, codeACK, codeNACK);
 break;
 }
 default: System.out.println("Try again..\n");
 }
 }
 }// end of main function

/*------------------------------Receive echo function---------------------------------------------
-------*/
private static void receiveEcho(Modem modem, String code) throws InterruptedException,
IOException {
 FileOutputStream echoTimeWriter= new FileOutputStream("echoTimes.txt", false);
 FileOutputStream echoCounterWriter= new FileOutputStream("echoCounter.txt",
false);

 int k;
 int runtime=5, cntPackets=0;//runtime 5mins
 String str = "";
 System.out.printf("Runtime (minutes) = "+ runtime+"\n");
 long startTime = System.currentTimeMillis();
 long stopTime = startTime + 60*1000*runtime; // 60 seconds * 1000 ms/sec
 long sendTime=0, receiveTime=0;
 String time = "", ClockTime = "";
 echoTimeWriter.write("Clock Time\tSystem Time\r\n".getBytes());
 while (System.currentTimeMillis()<=stopTime){
 cntPackets++;
 sendTime=System.currentTimeMillis();
 modem.write((code+"\r").getBytes());
 for (;;){
 try {
 k=modem.read();
 System.out.print((char)k);
 str+=(char)k;
 if (k==-1){
 System.out.println("\nCODE ERROR or connection
TIMED OUT");
 return;
 }
 if (str.endsWith("PSTOP")){
 receiveTime=System.currentTimeMillis();
ClockTime=str.substring(18, 26)+"\t";
 time = String.valueOf((receiveTime-sendTime)+ "\r\n");
 echoTimeWriter.write(ClockTime.getBytes());
echoTimeWriter.write(time.getBytes());
echoTimeWriter.flush();
str="";
 break;
 }
 }
 catch (Exception x) {
 break;
 }
 }
 System.out.println(""); 
 }

 echoCounterWriter.write(("\r\nRuntime: "+String.valueOf(runtime)).getBytes());
 echoCounterWriter.write(("\r\nPackets Received:
"+String.valueOf(cntPackets)).getBytes());
 echoCounterWriter.close();
 echoTimeWriter.close();
 System.out.println("Packets Received: "+cntPackets);
 System.out.println("\n\nFile echoTimes.txt created succesfuly!!");
 System.out.println("File echoCounter.txt created succesfuly!!");
}// end of receiveEcho function
/*---------------------------------Receive image function-----------------------------------------
-s*/

private static void receiveImage(Modem modem, String code, String fileName) throws
IOException {
 int k;
 boolean check;
 FileOutputStream writer = new FileOutputStream(fileName, false);
 check = modem.write((code+"\r").getBytes());
 System.out.println("\nReceiving "+fileName+"...");

 if (check==false){
 System.out.println("CODE ERROR or Connestion TIMED OUT");
 writer.close();
 return;
 }

 for (;;){
 try {
 k=modem.read();
writer.write((char)k);
 writer.flush();
if (k==-1){
 System.out.println("Finished!");
 break;
 }
 }
 catch (Exception x) {
 break;
 }

 }
 writer.close();
 }// end of receiveImage function
/*----------------------------------Receive GPS Function--------------------------------*/

private static void receiveGPS(Modem modem, String code) throws IOException {
 int lines = 99;
 String R_code = "";
 R_code = code+"R=10200"+lines;
 System.out.println("Executing R parameter = "+R_code+" (XPPPPLL)");

 modem.write((R_code+"\r").getBytes());

 String strConsole = receiveConsole(modem);
 if (strConsole == null){
 System.out.println("CODE ERROR or Connection TIMED OUT");
 return;
 }

 String[] strLines = strConsole.split("\r\n");
 if (strLines[0].equals("n.a")){
 System.out.println("Error: Receiving GPS packets failed");
 return; 
 }
 System.out.println("**TRACES**\n");
 float time1=0,time2=0; //times for the traces
 int diff=8; //set the difference between traces
 diff=diff*100/60; //convert seconds 1..60-scale to 1..100-
scale
 int tracesNum=7; //set the number of traces to be taken
 String[] traces = new String[tracesNum+1];
 int tracesCnt=0, flag=0;

 for (int i=0; i<lines; i++){
 if (strLines[i].startsWith("$GPGGA")){
 if (flag==0){
 String temp = strLines[i].split(",")[1];
 time1= Integer.valueOf(temp.substring(0, 6))*100/60;
 flag=1;
 }
 String temp = strLines[i].split(",")[1];
 time2= Integer.valueOf(temp.substring(0, 6))*100/60;

 if (Math.abs(time2-time1)>=diff){
 traces[tracesCnt]=strLines[i];
 if (tracesCnt==tracesNum)
 break;
 tracesCnt++;
time1=time2;
 }
 }
 }

 //Print Traces
 for (int i=0; i<tracesNum; i++){
 System.out.println(traces[i]);
 }

 String T_code = "", T_code_final = code+"T=";
 int n=1;
 System.out.println();
 for (int i=0; i<tracesNum; i++){
 String[] strSplit = traces[i].split(",");
 System.out.print("T parameter = ");
 String aa = strSplit[4].substring(1,3);
 String bb = strSplit[4].substring(3,5);
 String cc = String.valueOf(Integer.parseInt(strSplit[4].substring(6,
10))*60/100).substring(0,2);

 String dd = strSplit[2].substring(0,2);
 String ee = strSplit[2].substring(2,4);
 String zz = String.valueOf(Integer.parseInt(strSplit[2].substring(5,
9))*60/100).substring(0,2);
 T_code = aa+bb+cc+dd+ee+zz+"T";
 n=n+5;
 System.out.println(T_code);//.substring(0,T_code.length()));
 T_code_final = T_code_final + T_code + "=";
 }
 T_code_final=T_code_final.substring(0,T_code_final.length()-2);
 System.out.println("\nSending code: "+T_code_final);
 receiveImage(modem, T_code_final, "GPS Traces.jpg");
 }// end of receiveGPS function

/*--------------------------------------------Receive ARQ Funtion---------------------------------
---------------*/
private static void receiveARQ(Modem modem, String code, String nackCode) throws
IOException, InterruptedException {

 FileOutputStream arqTimeWriter= new FileOutputStream("ARQtimes.txt", false); 
 FileOutputStream arqCounterWriter= new FileOutputStream("ARQcounter.txt", false);

 int k, runtime=5, xor=1, fcs=1, cntTotalPackages=0, cntRepeatsTotal=0;
 int[] cntNackTimes= new int[15];
 int cntNackPerPackage=0;
 String time="", ClockTime="", str="";
 long startTime = System.currentTimeMillis();
 long stopTime = startTime + 60*1000*runtime; // 60 seconds * 1000 ms/sec
 long sendTime=0, receiveTime=0;
 System.out.printf("Runtime (minutes) = "+ runtime+"\n");

 arqTimeWriter.write("Clock Time\tSystem Time\tPacket Resends\r\n".getBytes());
 while (System.currentTimeMillis() <= stopTime) {
 if (xor==fcs) {
 cntTotalPackages++;
cntNackTimes[cntNackPerPackage]++;
cntNackPerPackage=0;
sendTime = System.currentTimeMillis();
modem.write((code+"\r").getBytes()); //ack code
 }
 else{
 cntRepeatsTotal++;
cntNackPerPackage++;
modem.write((nackCode+"\r").getBytes()); //nackcode
 }

 for (;;){
 try {
 k=modem.read();
 System.out.print((char)k);
 str+=(char)k;
 if (k==-1){
 System.out.println("\nCODE ERROR or connection
TIMED OUT");
 return;
 }
 if (str.endsWith("PSTOP")){
 receiveTime=System.currentTimeMillis();
 break;
 }
 }
 catch (Exception x) {
 break;
 }
 }

 System.out.println("");
 String[] s = str.split("<");
 s = s[1].split(">");
 fcs = Integer.parseInt(s[1].substring(1, 4));
 xor = s[0].charAt(0)^s[0].charAt(1);
 for (int i=2; i<16; i++){
 xor=xor^s[0].charAt(i);
 }
 if (xor==fcs){
 System.out.println("Packet OK!");
 receiveTime = System.currentTimeMillis();
time = String.valueOf((receiveTime - sendTime)+"\t");
 ClockTime = str.substring(18, 26)+"\t";
 arqTimeWriter.write(ClockTime.getBytes());
arqTimeWriter.write(time.getBytes());

arqTimeWriter.write((String.valueOf(cntNackPerPackage)+"\r\n").getBytes());
 arqTimeWriter.flush();
 }
 else {
 xor=0;
 }
 
 str="";
 }

 arqCounterWriter.write(("\r\nRuntime: "+String.valueOf(runtime)).getBytes());
 arqCounterWriter.write("\r\nPackets Received (ACK): ".getBytes());
 arqCounterWriter.write(String.valueOf(cntTotalPackages).getBytes());
 arqCounterWriter.write("\r\nPackets Resent (NACK): ".getBytes());
 arqCounterWriter.write(String.valueOf(cntRepeatsTotal).getBytes());
 arqCounterWriter.write("\r\nNACK Time Details...".getBytes());
 for (int i=0; i<cntNackTimes.length; i++){
 arqCounterWriter.write(("\r\n"+i+":\t"+cntNackTimes[i]).getBytes());
 }
 arqCounterWriter.close();
 arqTimeWriter.close();
 System.out.println("Packets Received: "+cntTotalPackages);
 System.out.println("Packets Resent: "+cntRepeatsTotal);
 System.out.println("\n\nFile arqTimes.txt created succesfuly!!");
 System.out.println("File arqCounter.txt created succesfuly!!");
 }// end of receiveARQ function

/*--------------------------------Receive Console Function----------------------------------------
--*/
public static String receiveConsole(Modem modem){
 int k;
 StringBuilder sb = new StringBuilder();
 String str = null;
 for (;;) {
 try {
 k=modem.read();
if (k==-1){
 break;
 }
 System.out.print((char)k);
 sb.append((char)k);
 str=sb.toString();
 } catch (Exception x) {
 break;
 }
 }
 System.out.println("");
 return str;
} //end of receiveConsole function
}//end of Class
